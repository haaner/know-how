# HDD-Speichernutzung anzeigen
docker system df

# Images anzeigen
docker images

# Container anzeigen
docker container ls

# Container mit spezifischen Namen starten
docker container run --name alpia -it alpine:3.15.0 /bin/sh

# Container starten und dann Programm ausführen
docker container start alpia
docker container exec -it alpia /bin/sh

# Kopieren in den Container
docker cp Downloads/linux_phat_client.tgz  alpia:/root/linux.tgz

# Programm im laufenden Container starten (z.B. bash im Container shopware-latest)
docker exec -it shopware-latest bash 

# Volume löschen
docker volume rm vol-xy

# Welcher Container nutzt ein anonymes Volume
docker ps -a --filter volume=ff6bf891801f0fd17d113a7098898f57f46cdf765b4e3575419802abb351503b

# Container und sämtliche Volume- (und Bind-)Zuordnungen auflisten
docker ps -a --format '{{ .ID }}' | xargs -I {} docker inspect -f '{{ .Name }}{{ printf "\n" }}{{ range .Mounts }}{{ printf "\n\t" }}{{ .Type }} {{ if eq .Type "bind" }}{{ .Source }}{{ end }}{{ .Name }} => {{ .Destination }}{{ end }}{{ printf "\n" }}' {}

# Docker-Compose ausführen und detachen
docker compose up -d

# Log-Files fortlaufend inspizieren (hilfreich, wenn zuvor detached wurde)
docker compose logs -f

# Log-Files des Service-Containers "app" einmalig inspizieren 
docker compose logs app 

# Docker-Compose ausführen und eingebundene Dockerfiles re-builden
docker compose up --build

# Befehl in dem Service-Container "app" ausführen, der per docker-compose gestartet wurde
docker compose exec app /bin/sh

# Befehl als root-User in dem Service-Container "app" ausführen, der per docker-compose gestartet wurde
docker compose exec -u 0 app /bin/sh

# Existierende Volumes verwenden und Port-Mappings manuell spezifizieren
docker run -p 80:80 -p 3306:3306 -p 2222:22 -p 8888:8888 -p 9999:9999 -d --name shopware --mount source=dockware_db_volume-sw,target=/var/lib/mysql --mount source=dockware_shop_volume-sw,target=/var/www/html dockware/dev:latest [/entrypoint.sh]

# Container-Anpassungen ins Image schreiben
docker commit shopware dockware/dev:latest

# Child-Image mit allen Parent-Images zusammenfassen (History bleibt)
docker save dockware/dev:child > child.tar
#docker rmi dockware/dev:child 
#docker image prune
docker load < child.tar

# Image umbenennen
docker tag <old_name> <new_name>
docker rmi <old_name>

# Child-Image mit allen Parent-Images mittels existierenden Container zusammenfassen (History geht verloren)
docker export --output shopware.tar shopware
docker import --change "ENTRYPOINT /entrypoint.sh" shopware.tar dockware:heiko   

# Aufräumen 
docker system prune

# Docker Repo-Verzeichnis umziehen (Windows) - siehe: https://dev.to/kim-ch/move-docker-desktop-data-distro-out-of-system-drive-4cg2
wsl --shutdown
wsl --export docker-desktop-data docker-desktop-data.tar
wsl --unregister docker-desktop-data
wsl --import docker-desktop-data D:\docker-new-repo\ docker-desktop-data.tar --version 2

# vim: ts=4:sw=4
