Apache:

	- mod_rewrite: (Using variables on the right side of RewriteCond by back-reference: \1)
	
		RewriteCond %{DOCUMENT_ROOT},%{REQUEST_FILENAME} ^([^,]*+),\1/*+(.*?/)/*+([^/]*)$ 
		RewriteRule ^ - [E=CURPATH:%2,E=CURNAME:%3]

		[ http://www.ckollars.org/apache-rewrite-htaccess.html#precedence ]
		
Composer:

	- ext-gmp ignorieren (erst ab Composer 2 möglich)
	
		php bin/composer.phar install --ignore-platform-req=ext-gmp
		
	- Content-Hash im composer.lock korrigieren: 
		
		composer update --lock  
		
Grub:

	- Installation (bei RAIDs auf alle beteiligte Platten klatschen, die die boot-Partition enthalten) 
	
		grub-install /dev/sda
		grub-install /dev/sdb 
		
		Auszug aus Hitory des internen Backup-Servers
		
		1502  cfdisk /dev/sdb
		1503  mdadm --manage /dev/md0  --add /dev/sdb2
		1504  mdadm --manage /dev/md1  --add /dev/sdb4
		1505  mdadm --examine --scan
		1506  vi /boot/grub/grub.cfg
		1507  update-grub
		1508  update-initramfs -u
		1509  grub-install /dev/sda
		1510  grub-install /dev/sdb
		1511  pstree
		1512  reboot
		
MySQL:

	- Alle Tabellen und den zugehörigen LOCK-Status anzeigen:
	
		SHOW OPEN TABLES

	- Alle gelockten Tabellen anzeigen:
    	
		SHOW OPEN TABLES WHERE In_use > 0		
		
	-  Let's see the list of the current processes, one of them is locking your table(s)

		SHOW PROCESSLIST;

	- Kill one of these processes

		KILL <put_process_id_here>;
		
	- Keys für Abfrage ermitteln (für die Optimierung von Zugriffszeiten):
	
		EXPLAIN SELECT SQL_NO_CACHE id, COUNT(*) FROM semmel.Person WHERE tmpName LIKE 'horst%' 
		
	- Summierung über gruppierten Sub-Select:
	
		SELECT SUM(sub.totals) FROM (SELECT COUNT(*) AS totals FROM `MetaField` GROUP BY srcId) AS sub


Wenn es sich um eine MyISAM-Tabelle handelt:

- Die Dateien *.frm, *.MYD, *.MYI in ein Datenbank-Verzeichnis "my_restore" unterhalb von /var/lib/mysql kopieren.

# cp myTable.* /var/lib/mysql/my_restore
# chown -R mysql:mysql /var/lib/mysql/my_restore

- Den MySQL-Serverprozess reloaden bzw neu-starten:

# /etc/init.d/mysql reload

---

Wenn sich um eine INNODB-Tabelle handelt:

- Die ursprŸngliche CREATE-Befehle neu generieren lassen:

# mysqlfrm --diagnostic myTable.frm > myTable.sql

- Das Row-Format der wiederherzustellenden-Tabelle ermitteln und gg.falls den CREATE-Befehl anpassen, z.B.

CREATE TABLE my_restore.myTable ... ENGINE=Innodb ROW_FORMAT=Compact

- Mit MySQL-Server verbinden und das sql-File sourcen und danach die implizit erzeugte ibd-Datei discarden:

mysql> SOURCE myTable.sql;
mysql> ALTER TABLE myTable DISCARD TABLESPACE;

- Das wiederherzustellende ibd-File in das Datenbank-Verzeichnis "my_restore" kopieren und auf dem MySQL-Server folgenden Befehl ausfŸhren:

# cp myTable.ibd /var/lib/mysql/my_restore
# chown -R mysql:mysql /var/lib/mysql/my_restore

mysql> ALTER TABLE myTable IMPORT TABLESPACE;

- Importierte Daten begutachten:

mysql> SELECT * FROM myTable;

			
GIT:
	- Remove file from version control but keep it locally:
	
		git rm --cached <file>
		
	- Einzelne Datei auschecken
	
		git checkout origin/master -- path/to/file
		
	- Apply a certain commit of one branch to another:
	
		dd2e86 - 946992	- 9143a9 - a6fd86 - 5a6057 [master]
           \
            76cada - 62ecb3	- b886a0 [feature]

		Let’s say you’ve written some code in commit 62ecb3 of the feature branch that is very important right now. It may contain a bug fix or code that other people need to have access to now. Whatever the reason, you want to have commit 62ecb3 in the master branch right now, but not the other code you’ve written in the feature branch.

		Here comes git cherry-pick. In this case, 62ecb3 is the cherry and you want to pick it!

			git checkout master
			git cherry-pick 62ecb3

		That’s all. 62ecb3 is now applied to the master branch and commited (as a new commit) in master. cherry-pick behaves just like merge. If git can’t apply the changes (e.g. you get merge conflicts), git leaves you to resolve the conflicts manually and make the commit yourself.
		
	- Apply a range of commits of one branch to another:

		You need, let’s say three consecutive commits. cherry-pick is not the right tool for this. rebase is. From the previous example, you’d want commit 76cada and 62ecb3 in master.

		The flow is to first create a new branch from feature at the last commit you want, in this case 62ecb3.

			git checkout -b newbranch 62ecb3

		Next up, you rebase the newbranch commit --onto master. The 76cada^ indicates that you want to start from that specific commit.

			git rebase --onto master 76cada^

		The result is that commits 76cada through 62ecb3 are applied to master.
		
	- Master Branch auf spezifischen Commit zurücksetzen und als HEAD pushen:

		git checkout master
		git reset --hard e3f1e37
		git push --force origin master	
			
	- Merge abbrechen und zurück zum ursprünglichen Zustand des Arbeitsverzeichnisses:
		
		git merge --abort
		
	- Konflikte lösen:
	
		git status (zeigt die Konflikte)
		vim conflictingFile.xy
		git add conflictingFile.xy (bzw. rm conflicitingFile.xy)
		git commit -m 'Konflikt behoben ..."
		
		oder:
		
		git checkout --ours conflictingFile.xy
		git checkout --theirs conflictingFile.xy
		
	- Nicht ausgecheckten Branch mit Upstream-Repo abgleichen:
	
		git fetch origin other-branch:other-branch
		
	- Abgleich mit Upstream Repo (vermeide: git pull)
	
		git fetch origin --prune ( --prune erntfernt alle lokalen Branches die upstream nicht mehr existieren )
		git checkout branch-name
		
		git merge --ff-only origin/branch-name 
			bzw. bei Fehlern 
		git rebase --preserve-merges origin/branch-name					
		
	- Force Pull (lokale Änderungen im gleichen Branch verwerfen):
	
		git branch -m feature-xy discarded-feature-xy
		git fetch origin feature-xy
		git checkout feature-xy
		git branch -D discarded-feature-xy
		
		bzw. wenn man sich absolut sicher (und die lokale Änderungen definitiv sofort weghaben will):
		
		git fetch origin feature-xy && git reset --hard origin/feature-xy
				
	- Rebasing: https://nathanleclaire.com/blog/2014/09/14/dont-be-scared-of-git-rebase/  		
				https://medium.freecodecamp.org/git-rebase-and-the-golden-rule-explained-70715eccc372
	
		git fetch origin
		git diff ep2 origin/ep2 --name-only # shows the changed / affected files
		git rebase origin/ep2
		git rebase --abort # if it fails
				
	- Mehrere (ungepushte) Commits zu einem zusammenfassen	
	
		git rebase -i origin/master

		This will bring up your text editor (-i is for "interactive") with a file that looks like this:

		pick 16b5fcc Code in, tests not passing
		pick c964dea Getting closer
		pick 06cf8ee Something changed
		pick 396b4a3 Tests pass
		pick 9be7fdb Better comments
		pick 7dba9cb All done

		Change all the pick to squash (or s) except the first one:

		pick 16b5fcc Code in, tests not passing
		squash c964dea Getting closer
		squash 06cf8ee Something changed
		squash 396b4a3 Tests pass
		squash 9be7fdb Better comments
		squash 7dba9cb All done

	- Submodul hinzufügen:
	
		git submodule add https://github.com/ic-hv/spout.git shared/vendor-static/spout 
	
	- Submodul updaten / auschecken:
	
		git submodule update --init --recursive
		
	- Submodul entfernen:
	
		git submodule deinit path/to/module # ensure local config cleanup
		git rm path/to/module               # clean WD and .gitmodules
		rm -rf .git/modules/path/to/module  # remove the repository
		
    - Gelöschte Datei: Letzten Commit finden  	
	
		git log --full-history  -- frontend/accedo/templates/css/styles_advertorial.css

		
	- Gelöschten Branch ermitteln und wiederherstellen
	
		git reflog 
		git branch recovered-branch <SHA_ID>
		
	- Sehr lange gelöschten Branch wiederherstellen
	
		git fsck --full --no-reflogs --unreachable --lost-found | grep commit | cut -d  -f3 | xargs -n 1 git log -n 1 --pretty=oneline > lost-found.txt
		# lost-found.txt durchforsten	
		
Jquery: 
	- Attribut-basierte Selektionen:
		$('input[type="radio"][id^="DealCostPosition"][id*="_provideType"]').each(function() {});
		
Excel:
	- Teilbereiche summieren:

		=SUMMEWENN(A2:A10;"Bezahlt";B2:B10) 
		=SUMME( -- die strg-taste gedrückt halten und alle zellen markieren, die addiert werden sollen - Klammer zu und RETURN drücken
		=SUMME(B1:B4;B6:B8) (Bereiche definieren)		
		
PDF:
	
	- Kompatibilitäts-Level anpassen:
	
		gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.3 -o output.pdf PhpStorm/accedo/backend/pdf/crest_Vorlage_Provisionsavis.pdf		
		
Screen:
		Ctrl+a S - Split screen	(horizontally)
		Ctrl+a | - Split screen (vertically)
			
		Ctrl+a TAB - Change Screen Window
		Ctr+a ESC - Copy / paste mode => SPACE - Set mark
		
		http://www.pixelbeat.org/lkdb/screen.html

SCSS: 

	- Per Kommandozeile SCSS-Dateien kompilieren:
	
		gem-sass Command-Line: 
			c:\Ruby23-x64\bin\scss.bat
				--style compact --unix-newlines --update $FileName$:../css/$FileNameWithoutExtension$.css

		node-sass CommandLine: 
			node c:\Users\User\AppData\Roaming\npm\node_modules\node-sass\bin\node-sass
				--output-style compact --output ../css --source-map true --source-map-contents $FileName$		
		
SVN:
	To ignore all files with the .jpg extension, use:
		svn propset svn:ignore "*.jpg" .

	If you want to ignore multiple files or folders, use:
		svn propedit svn:ignore .
		
	Resolve tree conflict:
		svn resolve --accept working -R <path>
		
	Resolve file conflict:
		svn resolved <file>
		 
		svn resolve --accept mine-full <file>
		 
	Remove file from version control but keep it locally:
		svn rm --keep-local <file>

	Add only directory but no contents:
		svn add --depth=empty <dir>
		
Xen:

	xl list 
	xl destroy 
	xl create /etc/xen/win2008r2
	
Windows:

	Pakete entfernen (via PowerShell), beispielsweise WindowsStore:
		
		Get-AppxPackage *windowsstore* | Remove-AppxPackage
		