- Remove file from version control but keep it locally:

	git rm --cached <file>
	
- Ignoriere alle gg.wärtig nicht mehr vorhandenen Dateien beim nächsten Commit

	git ls-files --deleted -z | git update-index --assume-unchanged -z --stdin 
	
- Einzelne Datei auschecken

	git checkout origin/master -- path/to/file
	
- Apply a certain commit of one branch to another:

	dd2e86 - 946992	- 9143a9 - a6fd86 - 5a6057 [master]
	   \
		76cada - 62ecb3	- b886a0 [feature]

	Let’s say you’ve written some code in commit 62ecb3 of the feature branch that is very important right now. It may contain a bug fix or code that other people need to have access to now. Whatever the reason, you want to have commit 62ecb3 in the master branch right now, but not the other code you’ve written in the feature branch.

	Here comes git cherry-pick. In this case, 62ecb3 is the cherry and you want to pick it!

		git checkout master
		git cherry-pick 62ecb3

	That’s all. 62ecb3 is now applied to the master branch and commited (as a new commit) in master. cherry-pick behaves just like merge. If git can’t apply the changes (e.g. you get merge conflicts), git leaves you to resolve the conflicts manually and make the commit yourself.
	
- Apply a range of commits of one branch to another:

	You need, let’s say three consecutive commits. cherry-pick is not the right tool for this. rebase is. From the previous example, you’d want commit 76cada and 62ecb3 in master.

	The flow is to first create a new branch from feature at the last commit you want, in this case 62ecb3.

		git checkout -b newbranch 62ecb3

	Next up, you rebase the newbranch commit --onto master. The 76cada^ indicates that you want to start from that specific commit.

		git rebase --onto master 76cada^

	The result is that commits 76cada through 62ecb3 are applied to master.
	
- Master Branch auf spezifischen Commit zurücksetzen und als HEAD pushen:

	git checkout master
	git reset --hard e3f1e37
	git push --force origin master	
		
- Merge abbrechen und zurück zum ursprünglichen Zustand des Arbeitsverzeichnisses:
	
	git merge --abort
	
- Konflikte lösen:

	git status (zeigt die Konflikte)
	vim conflictingFile.xy
	git add conflictingFile.xy (bzw. rm conflicitingFile.xy)
	git commit -m 'Konflikt behoben ..."
	
	oder:
	
	git checkout --ours conflictingFile.xy
	git checkout --theirs conflictingFile.xy
	
- Branch von Origin auschecken und Mapping auf lokalen Branch angeben

	git checkout -b nomobile origin/nomobile
	
- Nicht ausgecheckten Branch mit Upstream-Repo abgleichen:

	git fetch origin other-branch:other-branch
	
- Abgleich mit Upstream Repo (vermeide: git pull)

	git fetch origin --prune ( --prune erntfernt alle Referenzen auf lokale Branches die upstream nicht mehr existieren )
	git checkout branch-name
	
	git merge --ff-only origin/branch-name 
		bzw. bei Fehlern 
	git rebase --preserve-merges origin/branch-name					
	
- Force Pull (lokale Änderungen im gleichen Branch verwerfen):

	git branch -m feature-xy discarded-feature-xy
	git fetch origin feature-xy
	git checkout feature-xy
	git branch -D discarded-feature-xy
	
	bzw. wenn man sich absolut sicher (und die lokale Änderungen definitiv sofort weghaben will):
	
	git fetch origin feature-xy && git reset --hard origin/feature-xy
			
- Rebasing: https://nathanleclaire.com/blog/2014/09/14/dont-be-scared-of-git-rebase/  		
			https://medium.freecodecamp.org/git-rebase-and-the-golden-rule-explained-70715eccc372

	git fetch origin
	git diff ep2 origin/ep2 --name-only # shows the changed / affected files
	git rebase origin/ep2
	git rebase --abort # if it fails
			
- Mehrere (ungepushte) Commits zu einem zusammenfassen	

	git rebase -i origin/master

	This will bring up your text editor (-i is for "interactive") with a file that looks like this:

	pick 16b5fcc Code in, tests not passing
	pick c964dea Getting closer
	pick 06cf8ee Something changed
	pick 396b4a3 Tests pass
	pick 9be7fdb Better comments
	pick 7dba9cb All done

	Change all the pick to squash (or s) except the first one:

	pick 16b5fcc Code in, tests not passing
	squash c964dea Getting closer
	squash 06cf8ee Something changed
	squash 396b4a3 Tests pass
	squash 9be7fdb Better comments
	squash 7dba9cb All done

- Submodul hinzufügen:

	git submodule add https://github.com/ic-hv/spout.git shared/vendor-static/spout 

- Submodul updaten / auschecken:

	git submodule update --init --recursive
	
- Submodul entfernen:

	git submodule deinit path/to/module # ensure local config cleanup
	git rm path/to/module               # clean WD and .gitmodules
	rm -rf .git/modules/path/to/module  # remove the repository
	
- Gelöschte Datei: Letzten Commit finden  	

	git log --full-history  -- frontend/accedo/templates/css/styles_advertorial.css

	
- Gelöschten Branch ermitteln und wiederherstellen

	git reflog 
	git branch recovered-branch <SHA_ID>
	
- Sehr lange gelöschten Branch wiederherstellen

	git fsck --full --no-reflogs --unreachable --lost-found | grep commit | cut -d  -f3 | xargs -n 1 git log -n 1 --pretty=oneline > lost-found.txt
	# lost-found.txt durchforsten	